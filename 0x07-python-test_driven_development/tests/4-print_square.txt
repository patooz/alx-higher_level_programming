Squares will be printed using ``#``.

::

	>>> print_square = __import__('4-print_square').print_square
	>>> print_square(1)
	#

::

	>>> print_square(4)
	####
	####
	####
	####

::

	>>> print_square(10)
	##########
	##########
	##########
	##########
	##########
	##########
	##########
	##########
	##########
	##########

if ``size`` is zero, print nothing

::

	>>> print_square(0)

Invalid size

``size`` must be an int, else TypeError

::

	>>> print_square("not an int")
	Traceback (most recent call last):
	TypeError: size must be an integer

::

	>>> print_square(5.5)
	Traceback (most recent call last):
	TypeError: size must be an integer

::

	>>> print_square(None)
	Traceback (most recent call last):
	TypeError: size must be an integer

``size`` must be more than zero, else ValueError

::
	>>> print_square(-7)
	Traceback (most recent call last):
	ValueError: size must be >= 0

Type checking comes first before value checking

::

	>>> print_square(-7.5)
	Traceback (most recent call last):
	TypeError: size must be an integer

One argument must be provided

::

	>>> print_square()
	Traceback (most recent call last):
	TypeError: print_square() missing 1 required positional argument: 'size'


